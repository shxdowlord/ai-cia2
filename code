def combine_substrings(substrings):
    len1 = len(substrings[0])
    len2 = len(substrings[1])
    dp = [[0 for j in range(len2 + 1)] for i in range(len1 + 1)]

    for i in range(len1 + 1):
        for j in range(len2 + 1):
            if i == 0 or j == 0:
                dp[i][j] = i + j
            elif substrings[0][i - 1] == substrings[1][j - 1]:
                dp[i][j] = dp[i - 1][j - 1]
            else:
                dp[i][j] = 1 + min(dp[i - 1][j], dp[i][j - 1])

    i = len1
    j = len2
    result = []

    while i > 0 and j > 0:
        if substrings[0][i - 1] == substrings[1][j - 1]:
            result.append(substrings[0][i - 1])
            i -= 1
            j -= 1
        elif dp[i - 1][j] < dp[i][j - 1]:
            result.append(substrings[0][i - 1])
            i -= 1
        else:
            result.append(substrings[1][j - 1])
            j -= 1

    while i > 0:
        result.append(substrings[0][i - 1])
        i -= 1

    while j > 0:
        result.append(substrings[1][j - 1])
        j -= 1

    merged_word = ''.join(result[::-1])
    return merged_word

substrings = []

print("Enter substrings (type 'exit' when finished):")
while True:
    substring = input("Enter a substring: ")
    if substring.lower() == 'exit':
        break
    substrings.append(substring)

if len(substrings) < 2:
    print("At least two substrings are required for merging.")
else:
    merged_word = substrings[0]
    for i in range(1, len(substrings)):
        merged_word = combine_substrings([merged_word, substrings[i]])

    print("Merged word:", merged_word)
